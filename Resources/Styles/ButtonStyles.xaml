<!-- 按钮样式逻辑：仅定义结构和触发器，颜色引用外部主题表 -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 1. 先合并通用基础样式（继承非主题属性） -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Resource/CommonStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- 2. 按钮核心模板（所有按钮共用的视觉结构） -->
    <ControlTemplate x:Key="ButtonBaseTemplate" TargetType="{x:Type Button}">
        <!-- 按钮外层容器（边框+背景） -->
        <Border x:Name="buttonBorder"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}"
                CornerRadius="{TemplateBinding CornerRadius}" 
                SnapsToDevicePixels="True">
            
            <!-- 按钮内容（文字/图标） -->
            <ContentPresenter x:Name="contentPresenter"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              RecognizesAccessKey="True"/>
        </Border>

        <!-- 3. 触发器逻辑（所有按钮共用的交互反馈） -->
        <ControlTemplate.Triggers>
            <!-- 鼠标悬停状态 -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource Button.Hover.Background}"/>
                <Setter TargetName="buttonBorder" Property="BorderBrush" Value="{DynamicResource Button.Hover.Border}"/>
            </Trigger>

            <!-- 鼠标按下状态 -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource Button.Pressed.Background}"/>
                <Setter TargetName="buttonBorder" Property="BorderBrush" Value="{DynamicResource Button.Pressed.Border}"/>
            </Trigger>

            <!-- 禁用状态 -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource Button.Disabled.Background}"/>
                <Setter TargetName="buttonBorder" Property="BorderBrush" Value="{DynamicResource Button.Disabled.Border}"/>
                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Button.Disabled.Foreground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 4. 基础按钮样式（继承通用属性+应用核心模板） -->
    <Style TargetType="{x:Type Button}" x:Key="BaseButtonStyle" BasedOn="{StaticResource CommonButtonBase}">
        <Setter Property="Template" Value="{StaticResource ButtonBaseTemplate}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/> <!-- 默认圆角 -->
        
        <!-- 颜色引用主题表（不写具体值） -->
        <Setter Property="Background" Value="{DynamicResource Button.Normal.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Normal.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Button.Normal.Foreground}"/>
    </Style>

    <!-- 5. 关闭按钮样式（继承基础样式，仅补充特有属性） -->
    <Style TargetType="{x:Type Button}" x:Key="CloseButtonStyle" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="32"/> <!-- 关闭按钮固定宽度 -->
        <Setter Property="Height" Value="32"/> <!-- 关闭按钮固定高度 -->
        <Setter Property="Padding" Value="0"/> <!-- 取消内边距，让"×"居中 -->
        <Setter Property="CornerRadius" Value="0"/> <!-- 关闭按钮无边角（可按需修改） -->
    </Style>

    <!-- 6. 确认按钮样式（继承基础样式，补充特有属性） -->
    <Style TargetType="{x:Type Button}" x:Key="ConfirmButtonStyle" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="80"/> <!-- 确认按钮更宽 -->
        <Setter Property="Height" Value="36"/>
    </Style>

</ResourceDictionary>
